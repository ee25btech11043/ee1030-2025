import numpy as np
import matplotlib.pyplot as plt
import os

def read_data_file():
    """Read data from main.dat file generated by C program"""
    points = {}
    parabola_points = []
    circle_points = []
    area = 0
    if not os.path.exists('main.dat'):
        print("main.dat not found. Please run the C program first.")
        return None, None, None, None

    with open('main.dat', 'r') as f:
        for line in f:
            line = line.strip()
            if line.startswith('#') or not line:
                continue
            parts = line.split()
            if parts[0] in ['P', 'Q', 'S']:
                points[parts[0]] = (float(parts[1]), float(parts[2]))
            elif parts[0] == 'Area':
                area = float(parts[1])
            elif parts[0] == 'PARABOLA':
                parabola_points.append((float(parts[1]), float(parts[2])))
            elif parts[0] == 'CIRCLE':
                circle_points.append((float(parts[1]), float(parts[2])))
    return points, parabola_points, circle_points, area

def plot_problem():
    """Plot the parabola, circle, intersection points and triangle with legend"""
    points, parabola_points, circle_points, area = read_data_file()
    if points is None:
        return

    fig, ax = plt.subplots(figsize=(8,8))

    # Parabola
    if parabola_points:
        x_p, y_p = zip(*parabola_points)
    else:
        y_vals = np.linspace(-6, 6, 400)
        x_p = y_vals**2 / 8
        y_p = y_vals
    ax.plot(x_p, y_p, color='blue', lw=2, label='Parabola: $y^2=8x$')

    # Circle
    theta = np.linspace(0, 2*np.pi, 1000)
    x_c = 1 + np.sqrt(5)*np.cos(theta)
    y_c = 2 + np.sqrt(5)*np.sin(theta)
    ax.plot(x_c, y_c, color='red', lw=2, label='Circle: $x^2+y^2-2x-4y=0$')

    # Points P, Q, S
    for label, style in [('P','go'), ('Q','go'), ('S','mo')]:
        x0, y0 = points[label]
        ax.plot(x0, y0, style, ms=8)
        ax.annotate(f"{label}({int(x0)},{int(y0)})",
                    (x0, y0), xytext=(5,5),
                    textcoords='offset points',
                    fontsize=12, fontweight='bold')

    # Triangle PQS
    tri_x = [points['P'][0], points['Q'][0], points['S'][0], points['P'][0]]
    tri_y = [points['P'][1], points['Q'][1], points['S'][1], points['P'][1]]
    ax.plot(tri_x, tri_y, 'g--', lw=1.5, label='Triangle PQS')
    ax.fill(tri_x[:-1], tri_y[:-1], color='green', alpha=0.2)

    # Draw axes through origin
    ax.axhline(0, color='black', lw=1)
    ax.axvline(0, color='black', lw=1)

    # Labels, grid, aspect
    ax.set_xlabel('x', fontsize=12)
    ax.set_ylabel('y', fontsize=12)
    ax.grid(True, alpha=0.3)
    ax.set_aspect('equal', 'box')
    ax.set_xlim(-1, 6)
    ax.set_ylim(-3, 6)

    # Legend in top right, outside conics/triangle
    ax.legend(loc='upper right', frameon=True)

    plt.tight_layout()
    plt.savefig('fig1.png', dpi=300, bbox_inches='tight')
    plt.show()
    print(f"Area of triangle PQS: {area} square units")
    print("Plot saved as fig1.png")

if __name__ == "__main__":
    plot_problem()

